openapi: 3.0.3
info:
  title: Inventory Management System - OpenAPI 3.0
  description: Inventory Management System
  contact:
    email: areliemendoza.au@gmail.com
  version: 1.0.11
paths:
  /customers/:
    get:
      tags:
        - customer
      summary: Get customers
      description: Returns a list of customers
      operationId: getCustomers
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListCustomersResponse"
    post:
      tags:
        - customer
      summary: Create a new customer
      description: Returns a newly created customer
      operationId: createCustomer
      requestBody:
        $ref: "#/components/schemas/CreateCustomerRequest"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Customer"
        "400":
          description: Bad Request
        "403":
          description: Unauthorised
        "409":
          description: Customer already exists
  /customers/{customerId}:
    get:
      parameters:
        - name: customerId
          in: path
          description: Id of the customer
          required: true
          schema:
            format: integer
            type: number
      tags:
        - customer
      summary: Get customer
      description: Returns a customer
      operationId: getCustomer
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Customer"
        "404":
          description: customer not found
    patch:
      tags:
        - customer
      summary: Update existing customer
      description: Returns updated customer
      operationId: updateCustomer
      requestBody:
        $ref: "#/components/schemas/UpdateCustomerRequest"
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Customer"
        "400":
          description: Bad Request
        "403":
          description: Unauthorised
        "404":
          description: Customer not found      
  /shops/:
    get:
      tags:
        - shop
      summary: Get shops
      description: Returns a list of shops
      operationId: getShops
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListShopsResponse"
    post:
      tags:
        - shop
      summary: Create a new shop
      description: Returns a newly created shop
      operationId: createShop
      requestBody:
        $ref: "#/components/schemas/CreateShopRequest"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Shop"
        "400":
          description: Bad Request
        "403":
          description: Unauthorised
        "409":
          description: Shop already exists
  /shops/{shopId}:
    get:
      parameters:
        - name: shopId
          in: path
          description: Id of the shop
          required: true
          schema:
            format: integer
            type: number
      tags:
        - shop
      summary: Get shop
      description: Returns a shop
      operationId: getShop
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Shop"
        "404":
          description: shop not found
  /stockItems/:
    get:
      tags:
        - stock item
      summary: Get customers
      description: Returns a list of stock items
      operationId: getStockItems
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListStockItemResponse"
    post:
      tags:
        - stock item
      summary: Create a new stock item
      description: Returns a newly created stock item
      operationId: createStockItem
      requestBody:
        $ref: "#/components/schemas/CreateStockItemRequest"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StockItem"
        "400":
          description: Bad Request
        "403":
          description: Forbidden
        "409":
          description: Stock Item already exists
  /stockItems/{stockItemId}/:
    get:
      parameters:
        - name: stockItemId
          in: path
          description: Id of the stock item
          required: true
          schema:
            format: integer
            type: number
      tags:
        - stock item
      summary: Get stock item
      description: Returns a stock item
      operationId: getStockItem
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StockItem"
        "404":
          description: stock item not found
    patch:
      tags:
        - stock item
      summary: Update existing stock item
      description: Returns updated stock item
      operationId: updateStockItem
      requestBody:
        $ref: "#/components/schemas/UpdateStockItemRequest"
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StockItem"
        "400":
          description: Bad Request
        "403":
          description: Forbidden
        "404":
          description: Stock Item not found
  /suppliers/:
    get:
      # TODO
    post:
      # TODO
  /suppliers/{supplierId}:
    get:
      # TODO
    patch:
      # TODO

components:
  schemas:
    UpdateStockItemRequest:
      properties:
        category:
          type: string
        sku:
          type: string
        specialTax:
          format: float
          type: number
        status:
          type: string
        unitPrice:
          format: float
          type: number
      type: object
    UpdateCustomerRequest:
      properties:
        address:
          type: string
        authorisedDiscount:
          format: float
          type: number
        city:
          type: string
        email:
          type: string
        name:
          type: string
        phoneNumber: 
          type: string
      type: object
    CreateStockItemRequest:
      properties:
        sku:
          type: string
        category:
          type: string
        itemBrand:
          type: string
        itemDescription:
          type: string
        itemName:
          type: string
        markupPct:
          format: float
          type: number
        minimumStock:
          format: integer
          type: number
        quantity:
          format: integer
          type: number
        size:
          type: string
        specialTax:
          format: float
          type: number
        unitCost:
          format: float
          type: number
        shopId:
          format: integer
          type: number
      required:
        - sku
        - category
        - itemBrand
        - itemDescription
        - itemName
        - markupPct
        - minimumStock
        - quantity
        - size
        - specialTax
        - unitCost
        - shopId
      type: object
    CreateShopRequest:
      properties:
        address:
          type: string
        description:
          type: string
        shopName:
          type: string
      required:
        - address
        - description
        - shopName
      type: object
    CreateCustomerRequest:
      properties:
        address:
          type: string
        authorisedDiscount:
          format: float
          type: number
        city:
          type: string
        email:
          type: string
        name:
          type: string
        phoneNumber: 
          type: string
      required:
        - address
        - authorisedDiscount
        - city
        - email
        - name
        - phoneNumber
      type: object
    Customer:
      properties:
        address:
          type: string
        authorisedDiscount:
          format: float
          type: number
        city:
          type: string
        email:
          type: string
        id:
          format: integer
          type: number
        name:
          type: string
        phoneNumber: 
          type: string
        receipts:
          items:
            $ref: "#/components/schemas/Receipt"
          type: array
      required:
        - address
        - authorisedDiscount
        - city
        - email
        - id
        - name
        - phoneNumber
        - receipts
      type: object
    ListCustomersResponse:
      items:
        $ref: "#/components/schemas/Customer"
      type: array
    Receipt:
      properties:
        date:
          format: date-time
          type: string
        discount:
          format: float
          type: number
        id:
          format: integer
          type: number
        isActive:
          type: boolean
        outgoingStocks:
          items:
            $ref: "#/components/schemas/OutgoingStock"
          type: array
        paymentMethod:
          type: string
        purchaseType:
          type: string
        subtotal:
          format: float
          type: number
        total:
          format: float
          type: number
      required:
        - date
        - discount
        - id
        - isActive
        - outgoingStocks
        - items
        - paymentMethod
        - purchaseType
        - subtotal
        - total
      type: object
    OutgoingStock:
      properties:
        id:
          format: number
          type: integer
        quantity:
          type: integer
        stockItem:
          $ref: "#/components/schemas/StockItem"
        stockItemId:
          format: integer
          type: number
        subtotal:
          format: float
          type: number
        tax:
          format: float
          type: number
        total:
          format: float
          type: number
      required:
        - id
        - quantity
        - stockItem
        - stockItemId
        - subtotal
        - tax
        - total
      type: object
    StockItem:
      properties:
        category:
          type: string
        itemBrand:
          type: string
        itemDescription:
          type: string
        itemName:
          type: string
        quantity:
          format: integer
          type: number
        shopId:
          format: integer
          type: number
        size:
          type: string
        sku:
          type: string
        unitPrice:
          format: float
          type: number
      required:
        - category
        - itemBrand
        - itemDescription
        - itemName
        - quantity
        - shopId
        - size
        - sku
        - unitPrice
      type: object
    ListStockItemResponse:
      items:
        $ref: "#/components/schemas/StockItem"
      type: array
    ListShopsResponse:
      items:
        $ref: "#/components/schemas/Shop"
      type: array
    Shop:
      properties:
        address:
          type: string
        description:
          type: string
        id:
          format: integer
          type: number
        shopName:
          type: string
        stockItems:
          items:
            $ref: "#/components/schemas/ShopStockItem"
          type: array
        users:
          items:
            $ref: "#/components/schemas/ShopUserItem"
          type: array
      required:
        - address
        - authorisedDiscount
        - city
        - email
        - id
        - name
        - phoneNumber
        - receipts
      type: object
    ShopStockItem:
      properties:
        itemName:
          type: string
        quantity:
          format: integer
          type: number
        size:
          type: string
        sku:
          type: string
      required:
        - itemName
        - quantity
        - size
        - sku
      type: object
    ShopUserItem:
      properties:
        email:
          type: string
        id:
          format: integer
          type: number
        isAdmin:
          type: boolean
        role:
          type: string
      required:
        - email
        - id
        - isAdmin
        - role
      type: object
